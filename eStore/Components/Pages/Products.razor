@page "/products"
@rendermode InteractiveServer
@inject DataAccess.Services.IProductService ProductService
@inject Microsoft.AspNetCore.Components.NavigationManager Navigation
@inject eStore.AdminAuthService AuthService
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<PageTitle>Products</PageTitle>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary mb-2" @onclick="Create">Create Product</button>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Price</th>
                <th>Stock</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        @foreach (var p in products)
        {
            <tr>
                <td>@p.ProductId</td>
                <td>@p.ProductName</td>
                <td>@p.UnitPrice</td>
                <td>@p.UnitsInStock</td>
                <td>
                    <button class="btn btn-sm btn-secondary me-1" @onclick="() => Edit(p.ProductId)">Edit</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => Delete(p.ProductId)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IEnumerable<BusinessObject.DTOs.ProductDto>? products;
    private bool redirectToLogin;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        if (!AuthService.IsLoggedIn)
        {
            redirectToLogin = true;
            return;
        }

        await LoadProducts();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/productHub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On("ProductCreated", async () => await LoadProducts());
        hubConnection.On("ProductUpdated", async () => await LoadProducts());
        hubConnection.On("ProductDeleted", async () => await LoadProducts());

        await hubConnection.StartAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && redirectToLogin)
        {
            redirectToLogin = false;
            Navigation.NavigateTo("/login");
        }
    }

    private void Create()
    {
        Navigation.NavigateTo("/products/create");
    }

    private void Edit(int id)
    {
        Navigation.NavigateTo($"/products/edit/{id}");
    }

    private void Delete(int id)
    {
        ProductService.DeleteProduct(id);
    }

    private Task LoadProducts()
    {
        products = ProductService.GetProducts();
        StateHasChanged();
        return Task.CompletedTask;
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
