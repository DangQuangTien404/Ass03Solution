@page "/members"
@rendermode InteractiveServer
@inject DataAccess.Services.IMemberService MemberService
@inject Microsoft.AspNetCore.Components.NavigationManager Navigation
@inject eStore.AdminAuthService AuthService
@inject Microsoft.JSInterop.IJSRuntime Js
@using Microsoft.AspNetCore.SignalR.Client
@using BusinessObject.DTOs
@implements IAsyncDisposable

<PageTitle>Members</PageTitle>

@if (members == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <input class="form-control mb-2" placeholder="Search by email" @bind="searchTerm" @bind:event="oninput" />
    <button class="btn btn-primary mb-2" @onclick="ShowCreate">Create Member</button>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Email</th>
                <th>Company</th>
                <th>City</th>
                <th>Country</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        @foreach (var m in FilteredMembers)
        {
            <tr>
                <td>@m.MemberId</td>
                <td>@m.Email</td>
                <td>@m.CompanyName</td>
                <td>@m.City</td>
                <td>@m.Country</td>
                <td>
                    <button class="btn btn-sm btn-secondary me-1" @onclick="() => ShowEdit(m.MemberId)">Edit</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => Delete(m.MemberId)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((editing ? "Edit Member" : "Create Member"))</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <EditForm Model="modalModel" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText class="form-control" @bind-Value="modalModel.Email" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Company</label>
                            <InputText class="form-control" @bind-Value="modalModel.CompanyName" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">City</label>
                            <InputText class="form-control" @bind-Value="modalModel.City" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Country</label>
                            <InputText class="form-control" @bind-Value="modalModel.Country" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <InputText class="form-control" @bind-Value="modalModel.Password" type="password" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<MemberDto>? members;
    private string searchTerm = string.Empty;
    private bool redirectToLogin;
    private HubConnection? hubConnection;

    private bool showModal;
    private bool editing;
    private MemberDto modalModel = new();

    private IEnumerable<MemberDto> FilteredMembers => string.IsNullOrWhiteSpace(searchTerm)
        ? members ?? Enumerable.Empty<MemberDto>()
        : members?.Where(m => m.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ?? Enumerable.Empty<MemberDto>();

    protected override async Task OnInitializedAsync()
    {
        if (!AuthService.IsLoggedIn)
        {
            redirectToLogin = true;
            return;
        }

        await LoadData();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/memberHub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<MemberDto>("MemberCreated", _ => InvokeAsync(LoadData));
        hubConnection.On<MemberDto>("MemberUpdated", _ => InvokeAsync(LoadData));
        hubConnection.On<int>("MemberDeleted", _ => InvokeAsync(LoadData));

        await hubConnection.StartAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && redirectToLogin)
        {
            redirectToLogin = false;
            Navigation.NavigateTo("/login");
        }
    }

    private Task LoadData()
    {
        members = MemberService.GetMembers();
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void ShowCreate()
    {
        editing = false;
        modalModel = new MemberDto();
        showModal = true;
    }

    private void ShowEdit(int id)
    {
        var member = MemberService.GetMember(id);
        if (member == null) return;
        editing = true;
        modalModel = member;
        showModal = true;
    }

    private void CloseModal() => showModal = false;

    private async Task HandleValidSubmit()
    {
        if (!await Js.InvokeAsync<bool>("confirm", "Save changes?"))
            return;

        if (editing)
            MemberService.UpdateMember(modalModel);
        else
            MemberService.CreateMember(modalModel);

        showModal = false;
        await LoadData();
    }

    private async Task Delete(int id)
    {
        if (!await Js.InvokeAsync<bool>("confirm", "Delete this member?"))
            return;
        var deleted = MemberService.DeleteMember(id);
        if (!deleted)
        {
            await Js.InvokeVoidAsync("alert", "Member has orders and cannot be deleted.");
            return;
        }
        await LoadData();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
