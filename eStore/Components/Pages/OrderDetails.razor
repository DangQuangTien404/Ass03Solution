@page "/orders/{OrderId:int}/details"
@rendermode InteractiveServer
@using System.Net.Http.Json
@inject HttpClient Http
@inject eStore.AdminAuthService AuthService
@inject Microsoft.AspNetCore.Components.NavigationManager Navigation
@inject Microsoft.JSInterop.IJSRuntime Js
@using BusinessObject.DTOs

<PageTitle>Order Details</PageTitle>

@if (redirectToLogin)
{
    <p>Redirecting...</p>
}
else if (details == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-secondary mb-2" @onclick="Back">Back</button>
    @if (isAdmin && !showModal)
    {
        <button class="btn btn-primary mb-2 ms-2" @onclick="ShowCreate">Add Item</button>
    }
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Product</th>
                <th>Unit Price</th>
                <th>Quantity</th>
                <th>Discount</th>
                <th>Total</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        @foreach (var d in details)
        {
            <tr>
                <td>@d.ProductName</td>
                <td>@d.UnitPrice</td>
                <td>@d.Quantity</td>
                <td>@($"{d.Discount}%")</td>
                <td>@d.Total</td>
                <td>
                    @if (isAdmin)
                    {
                        <button class="btn btn-sm btn-secondary me-1" @onclick="() => ShowEdit(d)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => Delete(d.ProductId)">Delete</button>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
    <div class="mt-2 fw-bold">Order Total: @details.Sum(x => x.Total)</div>
}

@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((editing ? "Edit Item" : "Add Item"))</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <EditForm Model="modalModel" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        @if (editing)
                        {
                            <div class="mb-3">
                                <label class="form-label">Product</label>
                                <InputText class="form-control" @bind-Value="modalModel.ProductName" disabled />
                            </div>
                        }
                        else
                        {
                            <div class="mb-3">
                                <label class="form-label">Product</label>
                                <InputSelect class="form-control"
                                             Value="@modalModel.ProductId"
                                             ValueChanged="@((int id) => OnProductChanged(id))"
                                             ValueExpression="() => modalModel.ProductId">
                                    <option value="">Select product</option>
                                    @if (products != null)
                                    {
                                        foreach (var p in products)
                                        {
                                            if (details != null && details.Any(d => d.ProductId == p.ProductId))
                                            {
                                                continue;
                                            }
                                            <option value="@p.ProductId">@p.ProductName</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                        }
                        <div class="mb-3">
                            <label class="form-label">Quantity</label>
                            <InputNumber class="form-control" @bind-Value="modalModel.Quantity" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Discount</label>
                            <div class="input-group">
                                <InputNumber class="form-control" @bind-Value="modalModel.Discount" step="0.01" />
                                <span class="input-group-text">%</span>
                            </div>
                        </div>

                        @if (PreviewReady)
                        {
                            <div class="alert alert-light border">
                                <div><strong>@modalModel.ProductName</strong></div>
                                <div>Qty: @modalModel.Quantity @($"× {modalModel.UnitPrice:C}")</div>
                                <div>Discount: @modalModel.Discount% → Total: @modalModel.Total</div>
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int OrderId { get; set; }
    private IEnumerable<OrderDetailDto>? details;
    private IEnumerable<ProductDto>? products;
    private OrderDto? order;
    private bool redirectToLogin;
    private bool showModal;
    private bool editing;
    private OrderDetailDto modalModel = new();
    private bool isAdmin => AuthService.IsAdmin;

    private bool PreviewReady =>
        modalModel.ProductId > 0 &&
        modalModel.Quantity > 0 &&
        modalModel.Discount >= 0 &&
        modalModel.Discount <= 100;

    protected override async Task OnInitializedAsync()
    {
        if (!AuthService.IsLoggedIn)
        {
            redirectToLogin = true;
            return;
        }
        order = await Http.GetFromJsonAsync<OrderDto>($"api/Orders/{OrderId}");
        if (order == null || (!isAdmin && order.MemberId != AuthService.MemberId))
        {
            redirectToLogin = true;
            return;
        }

        await LoadData();
        if (isAdmin && details != null && !details.Any())
        {
            ShowCreate();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && redirectToLogin)
        {
            redirectToLogin = false;
            Navigation.NavigateTo("/login");
        }
    }

    private async Task LoadData()
    {
        details = await Http.GetFromJsonAsync<IEnumerable<OrderDetailDto>>($"api/OrderDetails/{OrderId}");
        products = await Http.GetFromJsonAsync<IEnumerable<ProductDto>>("api/Products");
    }

    private void ShowCreate()
    {
        if (!isAdmin) return;
        editing = false;
        modalModel = new OrderDetailDto { OrderId = OrderId, Quantity = 1, Discount = 0 };
        showModal = true;
    }

    private void ShowEdit(OrderDetailDto dto)
    {
        if (!isAdmin) return;
        editing = true;
        modalModel = new OrderDetailDto
        {
            OrderId = dto.OrderId,
            ProductId = dto.ProductId,
            ProductName = dto.ProductName,
            UnitPrice = dto.UnitPrice,
            Quantity = dto.Quantity,
            Discount = dto.Discount
        };
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private Task OnProductChanged(int id)
    {
        modalModel.ProductId = id;
        var prod = products?.FirstOrDefault(p => p.ProductId == id);
        modalModel.UnitPrice = prod?.UnitPrice ?? 0;
        modalModel.ProductName = prod?.ProductName ?? string.Empty;
        return Task.CompletedTask;
    }

    private async Task HandleValidSubmit()
    {
        if (!isAdmin) return;
        if (!await Js.InvokeAsync<bool>("confirm", "Save changes?"))
            return;
        HttpResponseMessage response;
        if (editing)
            response = await Http.PutAsJsonAsync("api/OrderDetails", modalModel);
        else
            response = await Http.PostAsJsonAsync("api/OrderDetails", modalModel);
        if (!response.IsSuccessStatusCode)
        {
            await Js.InvokeVoidAsync("alert", "Invalid data");
            return;
        }
        showModal = false;
        await LoadData();
        StateHasChanged();
    }

    private async Task Delete(int productId)
    {
        if (!isAdmin) return;
        if (!await Js.InvokeAsync<bool>("confirm", "Delete this item?"))
            return;
        var response = await Http.DeleteAsync($"api/OrderDetails/{OrderId}/{productId}");
        if (response.IsSuccessStatusCode)
        {
            await LoadData();
            StateHasChanged();
        }
    }

    private void Back() => Navigation.NavigateTo("/orders");
}
