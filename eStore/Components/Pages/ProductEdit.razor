@page "/products/create"
@page "/products/edit/{Id:int}"
@rendermode InteractiveServer
@inject DataAccess.Services.IProductService ProductService
@inject DataAccess.Services.ICategoryService CategoryService
@inject Microsoft.AspNetCore.Components.NavigationManager Navigation
@inject eStore.AdminAuthService AuthService
@using BusinessObject.DTOs

<PageTitle>Product</PageTitle>

<EditForm Model="model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label class="form-label">Name</label>
        <InputText class="form-control" @bind-Value="model.ProductName" />
    </div>
    <div class="mb-3">
        <label class="form-label">Category</label>
        <InputSelect class="form-control" @bind-Value="model.CategoryId">
            <option value="">Select category</option>
            @if (categories != null)
            {
                foreach (var c in categories)
                {
                    <option value="@c.CategoryId">@c.CategoryName</option>
                }
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label class="form-label">Weight</label>
        <InputText class="form-control" @bind-Value="model.Weight" />
    </div>
    <div class="mb-3">
        <label class="form-label">Unit Price</label>
        <InputNumber class="form-control" @bind-Value="model.UnitPrice" />
    </div>
    <div class="mb-3">
        <label class="form-label">Units In Stock</label>
        <InputNumber class="form-control" @bind-Value="model.UnitsInStock" />
    </div>
    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-secondary ms-2" @onclick="Back">Back</button>
</EditForm>

@code {
    [Parameter] public int? Id { get; set; }
    private ProductDto model = new();
    private IEnumerable<CategoryDto>? categories;
    private bool redirectToLogin;

    protected override void OnInitialized()
    {
        if (!AuthService.IsLoggedIn)
        {
            redirectToLogin = true;
            return;
        }

        categories = CategoryService.GetCategories();

        if (Id.HasValue)
        {
            var product = ProductService.GetProduct(Id.Value);
            if (product != null)
            {
                model = product;
            }
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && redirectToLogin)
        {
            redirectToLogin = false;
            Navigation.NavigateTo("/login");
        }
    }

    private void HandleValidSubmit()
    {
        if (Id.HasValue)
        {
            ProductService.UpdateProduct(model);
        }
        else
        {
            ProductService.CreateProduct(model);
        }
        Navigation.NavigateTo("/products");
    }

    private void Back()
    {
        Navigation.NavigateTo("/products");
    }
}
