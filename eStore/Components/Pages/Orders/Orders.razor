@page "/orders"
@rendermode InteractiveServer
@using System.Net.Http.Json
@inject HttpClient Http
@inject Microsoft.AspNetCore.Components.NavigationManager Navigation
@inject eStore.AdminAuthService AuthService
@inject Microsoft.JSInterop.IJSRuntime Js
@using Microsoft.AspNetCore.SignalR.Client
@using BusinessObject.DTOs
@implements IAsyncDisposable

<PageTitle>Orders</PageTitle>

@if (orders == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (isAdmin)
    {
        <input class="form-control mb-2" placeholder="Search by member id" @bind="searchTerm" @bind:event="oninput" />
        <button class="btn btn-primary mb-2" @onclick="ShowCreate">
            <span class="bi bi-plus-circle me-1"></span> Create Order
        </button>
    }
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Member</th>
                <th>Order Date</th>
                <th>Required</th>
                <th>Shipped</th>
                <th>Freight</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        @foreach (var o in DisplayedOrders)
        {
            <tr>
                <td>@o.OrderId</td>
                <td>@o.MemberId</td>
                <td>@o.OrderDate.ToShortDateString()</td>
                <td>@o.RequiredDate?.ToShortDateString()</td>
                <td>@o.ShippedDate?.ToShortDateString()</td>
                <td>@o.Freight</td>
                <td>
                    <button class="btn btn-sm btn-info me-1" @onclick="() => Details(o.OrderId)">
                        <span class="bi bi-info-circle me-1"></span> Details
                    </button>
                    @if (isAdmin)
                    {
                        <button class="btn btn-sm btn-secondary me-1" @onclick="() => ShowEdit(o.OrderId)">
                            <span class="bi bi-pencil-square me-1"></span> Edit
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="() => Delete(o.OrderId)">
                            <span class="bi bi-trash me-1"></span> Delete
                        </button>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
    <div class="d-flex justify-content-between">
        <button class="btn btn-secondary" @onclick="PrevPage" disabled="@(!CanPrev)">Previous</button>
        <span>Page @currentPage</span>
        <button class="btn btn-secondary" @onclick="NextPage" disabled="@(!CanNext)">Next</button>
    </div>
}

@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((editing ? "Edit Order" : "Create Order"))</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <EditForm Model="modalModel" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Member</label>
                            <InputSelect class="form-control" @bind-Value="modalModel.MemberId">
                                <option value="">Select member</option>
                                @if (members != null)
                                {
                                    foreach (var m in members.OrderBy(m => m.MemberId))
                                    {
                                        <option value="@m.MemberId">@($"{m.MemberId} - {m.Email}")</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Order Date</label>
                            <InputDate class="form-control" @bind-Value="modalModel.OrderDate" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Required Date</label>
                            <InputDate class="form-control" @bind-Value="modalModel.RequiredDate" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Shipped Date</label>
                            <InputDate class="form-control" @bind-Value="modalModel.ShippedDate" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Freight</label>
                            <InputNumber class="form-control" @bind-Value="modalModel.Freight" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">
                            <span class="bi bi-check me-1"></span> Save
                        </button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">
                            <span class="bi bi-x me-1"></span> Cancel
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<OrderDto>? orders;
    private IEnumerable<MemberDto>? members;
    private string searchTerm = string.Empty;
    private bool redirectToLogin;
    private HubConnection? orderHubConnection;
    private HubConnection? memberHubConnection;
    private bool isAdmin => AuthService.IsAdmin;

    private bool showModal;
    private bool editing;
    private OrderDto modalModel = new();


    private int currentPage = 1;
    private readonly int pageSize = 10;

    private bool CanPrev => currentPage > 1;
    private bool CanNext => orders != null && orders.Count() == pageSize;

    private IEnumerable<OrderDto> DisplayedOrders => string.IsNullOrWhiteSpace(searchTerm)
        ? orders ?? Enumerable.Empty<OrderDto>()
        : orders?.Where(o => o.MemberId.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ?? Enumerable.Empty<OrderDto>();

    private void NextPage()
    {
        if (CanNext)
        {
            currentPage++;
            _ = LoadOrders();
        }
    }

    private void PrevPage()
    {
        if (CanPrev)
        {
            currentPage--;
            _ = LoadOrders();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!AuthService.IsLoggedIn)
        {
            redirectToLogin = true;
            return;
        }

        await LoadOrders();
        if (isAdmin)
        {
            await LoadMembers();
            memberHubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/memberHub"))
                .WithAutomaticReconnect()
                .Build();

            memberHubConnection.On<MemberDto>("MemberCreated", _ => InvokeAsync(LoadMembers));
            memberHubConnection.On<MemberDto>("MemberUpdated", _ => InvokeAsync(LoadMembers));
            memberHubConnection.On<int>("MemberDeleted", _ => InvokeAsync(LoadMembers));

            await memberHubConnection.StartAsync();
        }

        orderHubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/orderHub"))
            .WithAutomaticReconnect()
            .Build();

        orderHubConnection.On<OrderDto>("OrderCreated", _ => InvokeAsync(LoadOrders));
        orderHubConnection.On<OrderDto>("OrderUpdated", _ => InvokeAsync(LoadOrders));
        orderHubConnection.On<int>("OrderDeleted", _ => InvokeAsync(LoadOrders));

        await orderHubConnection.StartAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && redirectToLogin)
        {
            redirectToLogin = false;
            Navigation.NavigateTo("/login");
        }
    }

    private async Task LoadOrders()
    {
        var url = isAdmin
            ? $"api/Orders?page={currentPage}&pageSize={pageSize}"
            : $"api/Orders/member/{AuthService.MemberId ?? 0}?page={currentPage}&pageSize={pageSize}";
        orders = await Http.GetFromJsonAsync<IEnumerable<OrderDto>>(url);
        StateHasChanged();
    }

    private async Task LoadMembers()
    {
        members = await Http.GetFromJsonAsync<IEnumerable<MemberDto>>("api/Members?page=1&pageSize=1000");
        StateHasChanged();
    }

    private void ShowCreate()
    {
        if (!isAdmin) return;
        editing = false;
        modalModel = new OrderDto { OrderDate = DateTime.Now };
        showModal = true;
    }

    private async Task ShowEdit(int id)
    {
        if (!isAdmin) return;
        var order = await Http.GetFromJsonAsync<OrderDto>($"api/Orders/{id}");
        if (order == null) return;
        editing = true;
        modalModel = order;
        showModal = true;
    }

    private void CloseModal() => showModal = false;

    private void Details(int id)
    {
        Navigation.NavigateTo($"/orders/{id}/details");
    }

    private async Task HandleValidSubmit()
    {
        if (!isAdmin) return;
        if (!await Js.InvokeAsync<bool>("confirm", "Save changes?"))
            return;

        HttpResponseMessage response;
        if (editing)
        {
            response = await Http.PutAsJsonAsync($"api/Orders/{modalModel.OrderId}", modalModel);
        }
        else
        {
            response = await Http.PostAsJsonAsync("api/Orders", modalModel);
        }
        if (!response.IsSuccessStatusCode)
        {
            await Js.InvokeVoidAsync("alert", "Invalid data or member does not exist.");
            return;
        }

        showModal = false;
        await LoadOrders();
    }

    private async Task Delete(int id)
    {
        if (!isAdmin) return;
        if (!await Js.InvokeAsync<bool>("confirm", "Delete this order?"))
            return;
        var response = await Http.DeleteAsync($"api/Orders/{id}");
        if (!response.IsSuccessStatusCode)
        {
            await Js.InvokeVoidAsync("alert", "Order has details and cannot be deleted.");
            return;
        }
        await LoadOrders();
    }

    public async ValueTask DisposeAsync()
    {
        if (orderHubConnection != null)
            await orderHubConnection.DisposeAsync();
        if (memberHubConnection != null)
            await memberHubConnection.DisposeAsync();
    }
}
