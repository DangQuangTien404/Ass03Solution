@page "/sales-report"
@rendermode InteractiveServer
@using System.Net.Http.Json
@inject HttpClient Http
@inject Microsoft.AspNetCore.Components.NavigationManager Navigation
@inject eStore.AdminAuthService AuthService

<PageTitle>Sales Report</PageTitle>

@if (redirectToLogin)
{
    <p>Redirecting...</p>
}
else
{
    <EditForm Model="this" OnValidSubmit="GenerateReport">
        <DataAnnotationsValidator />
        <div class="row g-3 mb-3">
            <div class="col-auto">
                <label class="form-label">Start Date</label>
                <InputDate class="form-control" @bind-Value="StartDate" />
            </div>
            <div class="col-auto">
                <label class="form-label">End Date</label>
                <InputDate class="form-control" @bind-Value="EndDate" />
            </div>
            <div class="col-auto align-self-end">
                <button type="submit" class="btn btn-primary">
                    <span class="bi bi-bar-chart-line me-1"></span> Generate
                </button>
            </div>
        </div>
    </EditForm>

    @if (report != null)
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Order</th>
                    <th>Member</th>
                    <th>Date</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var r in report)
            {
                <tr>
                    <td>@r.OrderId</td>
                    <td>@r.MemberId</td>
                    <td>@r.OrderDate.ToShortDateString()</td>
                    <td>@r.Total</td>
                </tr>
            }
            </tbody>
        </table>
    }
}

@code {
    private bool redirectToLogin;
    [System.ComponentModel.DataAnnotations.Required]
    public DateTime StartDate { get; set; } = DateTime.Today.AddMonths(-1);

    [System.ComponentModel.DataAnnotations.Required]
    public DateTime EndDate { get; set; } = DateTime.Today;
    private IEnumerable<BusinessObject.DTOs.SalesReportDto>? report;

    protected override void OnInitialized()
    {
        if (!AuthService.IsLoggedIn || !AuthService.IsAdmin)
        {
            redirectToLogin = true;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && redirectToLogin)
        {
            redirectToLogin = false;
            Navigation.NavigateTo("/login");
        }
    }

    private async Task GenerateReport()
    {
        var start = Uri.EscapeDataString(StartDate.ToString("yyyy-MM-dd"));
        var end = Uri.EscapeDataString(EndDate.ToString("yyyy-MM-dd"));
        report = await Http.GetFromJsonAsync<IEnumerable<BusinessObject.DTOs.SalesReportDto>>(
            $"api/SalesReport?startDate={start}&endDate={end}");
    }
}
